plugins {
    id 'java'
    id 'application'
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

application {
    mainClass = 'com.example.ExamplePluginTest'
}

// Add this configuration to include test classes in the run task
tasks.named('run', JavaExec) {
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = [
        '-ea',  // Enable assertions
        '--add-exports=java.desktop/com.apple.eawt=ALL-UNNAMED',  // Allow access to Apple's EAWT
        '--add-opens=java.desktop/java.awt=ALL-UNNAMED'  // Sometimes also needed
    ]
}

repositories {
    mavenLocal()
    maven {
        url = 'https://repo.runelite.net'
        content {
            includeGroupByRegex("net\\.runelite.*")
        }
    }
    mavenCentral()
}

def runeLiteVersion = 'latest.release'

dependencies {
    // RuneLite dependencies
    compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
    compileOnly group: 'net.runelite', name: 'runelite-api', version: runeLiteVersion

    // Lombok for annotations
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // Testing dependencies
    testImplementation 'junit:junit:4.12'
    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion
    testImplementation group: 'net.runelite', name: 'jshell', version: runeLiteVersion
}

group = 'com.example'
version = '1.0-SNAPSHOT'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(11)
}

tasks.register('shadowJar', Jar) {
    dependsOn configurations.testRuntimeClasspath
    manifest {
        attributes('Main-Class': 'com.example.ExamplePluginTest', 'Multi-Release': true)
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.output
    from sourceSets.test.output
    from {
        configurations.testRuntimeClasspath.collect { file ->
            file.isDirectory() ? file : zipTree(file)
        }
    }

    exclude 'META-INF/INDEX.LIST'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude '**/module-info.class'

    group = BasePlugin.BUILD_GROUP
    archiveClassifier.set('shadow')
    archiveFileName.set("${rootProject.name}-${project.version}-all.jar")
}